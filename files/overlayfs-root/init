#!/bin/sh

# execute original initrc script if "walbrix.boot" is not specified
mount -t proc -o noexec,nosuid,nodev proc /proc >/dev/null 2>&1
if ! /bin/busybox grep -q '\bwalbrix.ro_layer=' /proc/cmdline; then
    busybox umount /proc && exec ./init.gentoo $@
fi

. /etc/initrd.defaults
. /etc/initrd.scripts

# Clean input/output
exec >${CONSOLE} <${CONSOLE} 2>&1

mount -t proc -o noexec,nosuid,nodev proc /proc >/dev/null 2>&1
mount -o remount,rw / >/dev/null 2>&1

# Prevent superfluous printks from being printed to the console
echo 1 > /proc/sys/kernel/printk

# Set up symlinks
/bin/busybox --install -s

CMDLINE=$(cat /proc/cmdline)

QUIET='0'
ROOT_PARTITION=/dev/xvda1
RO_LAYER=/system
RW_LAYER=/rw
DATADIRS="/data01 /data02"
LOCALE=ja_JP
INIT_OPTS=''
SOFTLEVEL=default

for x in ${CMDLINE}
do
    case "${x}" in
	root=*)
	    ROOT_PARTITION=${x#*=}
	    ;;
	walbrix.ro_layer=*)
	    RO_LAYER=${x#*=}
	    ;;
	walbrix.rw_layer=*)
	    RW_LAYER=${x#*=}
	    ;;
	walbrix.locale=*)
	    LOCALE=${x#*=}
	    ;;
	init_opts=*)
	    INIT_OPTS=${x#*=}
	    ;;
	softlevel=*)
	    SOFTLEVEL=${x#*=}
	    ;;
    esac
done

# Mount devfs, sysfs
mount_devfs
mount_sysfs

cd /

mkdir -p "${NEW_ROOT}"
CHROOT="${NEW_ROOT}"

mkdir /mnt/orig_root

if ! mount "${ROOT_PARTITION}" /mnt/orig_root; then
    bad_msg "Unable to mount $ROOT_PARTITION"
    exec sh
fi

rm -rf /mnt/orig_root/work # cleanup overlayfs workdir
mkdir -p /mnt/orig_root${RW_LAYER} /mnt/orig_root/ro /mnt/orig_root/work
rm -rf /mnt/orig_root${RW_LAYER}/tmp /mnt/orig_root${RW_LAYER}/var/tmp # cleanup temporary dirs
rm -f /mnt/orig_root${RW_LAYER}/etc/mtab # mtab should always point /proc/mounts
rm -f /mnt/orig_root${RW_LAYER}/etc/ld.so.cache

if ! losetup -r /dev/loop0 /mnt/orig_root${RO_LAYER}; then
    bad_msg "Unable to setup loopback (ROOT_PARTITION)${RO_LAYER}"
    exec sh
fi

if ! mount -o ro /dev/loop0 /mnt/orig_root/ro; then
    bad_msg "Unable to loopback mount (ROOT_PARTITION)${RO_LAYER}"
    exec sh
fi

if [ "${SOFTLEVEL}" = "rescue" ]; then
    mount -t tmpfs tmpfs /mnt/orig_root${RW_LAYER} || bad_msg "Unable to mount tmpfs"
fi

# create datadirs if not exist (mainly for docker)
for i in $DATADIRS; do
	mkdir -p /mnt/orig_root${i}
done

good_msg "Mounting /newroot as overlay..."
mount -t overlay -o lowerdir=/mnt/orig_root/ro,upperdir=/mnt/orig_root${RW_LAYER},workdir=/mnt/orig_root/work overlay /newroot || bad_msg "Unable to mount /newroot"

good_msg "Moving original root under /.overlay..."
mkdir -p /newroot/.overlay && mount --move /mnt/orig_root /newroot/.overlay

touch /newroot/.overlay/.lock

if [ -f /newroot/.overlay/system.cur ];then
     mv -f /newroot/.overlay/system.cur /newroot/.overlay/system.old
fi

if [ `grep '/newroot/.overlay' /proc/mounts | awk '{print $1}'` = "tmpfs" ]; then
    # some useful modification for rescue environment
    sed -i 's/tty1 linux/--autologin root tty1 linux/' /newroot/etc/inittab
fi

mount --move /dev /newroot/dev
mount --move /sys /newroot/sys
mount --move /proc /newroot/proc

# for MySQL on overlayfs (see https://github.com/docker/for-linux/issues/72)
find /newroot/var/lib/mysql -type f -exec touch -ac {} \;

exec /sbin/switch_root /newroot /sbin/init "${INIT_OPTS}"

# If we get here, something bad has happened
exec /bin/sh

