$require rootfs.lst
/usr/bin/ldd
$package sys-apps/baselayout
$require dev.lst
$require bash.lst
$require glibc.lst
$package app-arch/bzip2
$package app-arch/cpio
$package app-arch/gzip
$package app-arch/tar
$package app-arch/unzip
$package app-arch/xz-utils
$package app-arch/zip
$require nano.lst
$package app-misc/ca-certificates
$package app-misc/mime-types
$package app-misc/pax-utils
$require python27.lst
$require openssl.lst
$package net-misc/iputils
$package net-misc/openssh
$package net-misc/rsync
$package net-misc/wget
$package sys-apps/acl
$package sys-apps/attr
$package sys-apps/busybox
$package sys-apps/coreutils
$package sys-apps/diffutils
$package sys-apps/file
$package sys-apps/findutils
$package sys-apps/gawk
$package sys-apps/gentoo-functions
$package sys-apps/grep
$package sys-apps/hwids
$package sys-apps/iproute2
$package sys-apps/less
$package sys-apps/net-tools
$require openrc.lst
$package sys-apps/sed
$package sys-apps/which
$package sys-devel/make
$package sys-devel/patch
$package sys-fs/e2fsprogs
$require udev.lst
$package sys-libs/timezone-data
$package sys-process/procps

$require portage-configs.lst
$require kernel.lst

# boot
$write /etc/fstab 'overlay\t/\toverlay\tdefaults\t0 0\n'
$write /etc/resolv.conf 'search local\nnameserver 8.8.8.8\nnameserver 8.8.4.4'
$sed /etc/shadow 's/^root:\*:/root::/' # Empty root password
$sed /etc/conf.d/hostname 's/^hostname=".\+"/hostname="WBFREE01"/' # set default hostname

$symlink /etc/init.d/net.eth0 net.lo
$symlink /etc/runlevels/default/net.eth0 /etc/init.d/net.eth0

# extend nf_conntrack capacity
$write --append /etc/sysctl.conf 'net.nf_conntrack_max = 65536'

# modify initramfs
$mkdir /tmp/initramfs/etc
$copy gpgpu/init /tmp/initramfs/init.walbrix
$exec 'cd /tmp/initramfs && unxz -c /boot/initramfs | cpio -idm && mv /tmp/initramfs/init /tmp/initramfs/init.gentoo && mv /tmp/initramfs/init.walbrix /tmp/initramfs/init && (find .|cpio -o -H newc) | xz -c --check=crc32 > /boot/initramfs'
$deltree /tmp/initramfs

# bootloader config
$mkdir /boot/grub
$copy gpgpu/grub.cfg /boot/grub/grub.cfg

# system services
$require cron.lst

# prevent to get profile layer unmounted
$write /etc/conf.d/localmount 'no_umounts="/.overlay/boot|/.overlay/profile"'
# to get profile layer properly ro-remounted
$sed /etc/init.d/mount-ro 's/do_unmount "umount -r"/do_unmount "mount -o remount,ro"/'

# storage and filesystems
$require exfat.lst
$require ntfs3g.lst
$package sys-apps/gptfdisk
/usr/bin/lsscsi

# networks
$require openssh.lst
$require nss-mdns.lst
$require nss-myhostname.lst
$package net-analyzer/traceroute
$require wireless-tools.lst
$require tcpdump.lst
$package net-misc/dhcp
$require ssmtp.lst
$require cu.lst
/usr/bin/curl

# tools
$require binutils.lst
$require nvi.lst
/usr/bin/strace
/usr/bin/telnet
$package app-misc/screen
$package app-editors/bvi
$package app-admin/sysstat
$package sys-process/lsof

# hardware
/etc/udev/hwdb.bin
/usr/bin/beep
/usr/bin/cpuid2cpuflags
$package sys-apps/usbutils
$package sys-apps/lm_sensors
$package sys-power/cpupower
$package sys-apps/lshw

# Python3 compat
$package dev-python/future

$package dev-vcs/git

# non-free
$exec "if [ -d /lib/modules/$(KERNEL_VERSION)/video ]; then cd /lib/modules/$(KERNEL_VERSION)/video && zip -P 'I agree to the end user license agreement' -m -0 nvidia.zip *.ko; fi"
#makeself --nocomp --target /lib/modules/$(KERNEL_VERSION)/video --nox11 --ssl-encrypt /lib/modules/$(KERNEL_VERSION)/video /lib/modules/$(KERNEL_VERSION)/video/nvidia.run nvidia /sbin/depmod

# misc
$package dev-libs/ocl-icd
$exec --overlay "eselect opencl set ocl-icd"
/usr/lib64/libdrm.so.2
/usr/lib64/libdrm_amdgpu.so.1
/usr/lib64/libmicrohttpd.so.12
/usr/lib64/libhwloc.so.5
/usr/share/libdrm/amdgpu.ids

$write /etc/sysctl.d/nr_hugepages.conf 'vm.nr_hugepages=128'

$require timezone-jp.lst

$exec --overlay "env-update"
$deltree /var/lib/portage
